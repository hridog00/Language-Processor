import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code {:

Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal."+x.toString());
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);
  
}



:};

action code {:
      private  int vtemporal=0;
      public  String nuevaTemporal()
      {
      	return "tmp"+(++vtemporal);
      }
      private  int etiqActual=0;
      public  String nuevaEtiqueta()
      {
      	return "etiqCP_"+(++etiqActual);
      }
      class BloqueCondicion {
	 String etqCierto, etqFalso,codigo;
	 }
	 private BloqueCondicion generarCondicion(String condicion)
	 {
	 BloqueCondicion bCond=new BloqueCondicion();
	 bCond.etqCierto=nuevaEtiqueta();
	 bCond.etqFalso=nuevaEtiqueta();
	 bCond.codigo="if_false,"+condicion+","+bCond.etqFalso+";\ngoto,"+bCond.etqCierto+";\n";
	 return bCond;
	 }
	 
      
:}

//init with {: s.init(); :};
/*Siguiente token al lexico*/
//scan with {: return this.getScanner().next_token(); :};

/*Terminales tokens que puede devolver el lexico*/
terminal INTEGER,REAL,CHAR,BOOLEAN;
terminal  AND, OR, IF, ELSE, EQUAL, NOT_EQUAL, WHILE;
terminal MAS, MENOS, MULT, DIV, MOD, UMENOS;
terminal BIGGER, BIGGER_EQUAL, SMALLER, SMALLER_EQUAL;
terminal ABREPAR,CIERRAPAR,ABRECOR,CIERRACOR,DOSPUNTOS,COMA,PTOYCOMA, ASIG , CIERRALLAVE, ABRELLAVE, VOID, RETURN;

terminal String CARACTER;
terminal Simbolo ID;
terminal Integer NUM,DIM;
terminal Float NUMREAL;
terminal boolean TRUE, FALSE;

non terminal Sentencia Asignacion, AsigTipo, listaDeclaraciones, DeclaracionVar , DeclaracionTipoBasico, ListaValores, AsignacionDecl, DeclaracionFuncion,ListaSentencias, Sentence ;
non terminal programa;
non terminal Sentencia SenteicaIf, SentenciaElse, SentenciaWhile;
non terminal Sentencia ListaExprLogicas, ExprLogica, TipoExpr, Expr;
non terminal Sentencia ExpresionNum, ExpresionNumP,Termino,TerminoP,Elemento, Factor, LlamadaFunc,ListaParam , Elem  , ListaParam_p, Bool_value,  ReturnSentencia;
non terminal   listaargumentos, listaargumentos_p , DeclaracionArr, DOSdim,   FuncionTipo, ReturnTipo, ArrElement;
non terminal Sentencia Valores, Numeros, Tipo;


precedence left MAS, MENOS;
precedence left MULT,DIV,MOD;
precedence left UMENOS;
/*Gramatica*/

programa ::= listaDeclaraciones:l
			 {: System.out.println("Código generado:\n" + l.codigo); :}
	
			| programa error PTOYCOMA
			{: this.parser.error_sintactico(this.parser.cur_token);:}
			
;
listaDeclaraciones ::=  listaDeclaraciones:l DeclaracionVar:d
					{: 

					RESULT=new Sentencia(l.codigo+""+d.codigo,"");
					 :}  
					|  listaDeclaraciones:l DeclaracionFuncion:df
					{: 
					System.out.println("DECLARACION FUNCION:"+df.codigo);
					RESULT=new Sentencia(l.codigo+""+df.codigo,"");
					 :} 
					
					| {: RESULT=new Sentencia("",""); :}
;
DeclaracionVar ::= DeclaracionTipoBasico:d1
				{: 
					
					
					RESULT=new Sentencia(d1.codigo,d1.resultado);
					 :}
				| DeclaracionArr
			
				
;
DeclaracionTipoBasico ::= Tipo ListaValores:l1 PTOYCOMA 
{: 
					RESULT=new Sentencia(l1.codigo, l1.resultado);
					 :}
;
ListaValores ::= ID:s AsignacionDecl:a
{: Sentencia resultSent=new Sentencia(s.nombre+"="+a.resultado+"\n",s.nombre);
								RESULT=resultSent;
								s.valor=a.resultado;
								
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									}else{
									sAux.valor=a.resultado;
									
									}
										
									
									:}
				| ListaValores:lv1 COMA ID:s AsignacionDecl:a
				{: Sentencia resultSent=new Sentencia(lv1.codigo+s.nombre+"="+a.resultado+"\n",s.nombre);
								RESULT=resultSent;
								s.valor=a.resultado;
								
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									System.out.println("Insertando "+sAux.nombre);
									}else{
									sAux.valor=a.resultado;
									
									}
										
									
									:}
;


DeclaracionArr ::= Tipo ID ABRECOR NUM CIERRACOR DOSdim PTOYCOMA
;
DOSdim ::=  
	| ABRECOR DIM CIERRACOR 
;
AsignacionDecl ::= ASIG Valores:v


 | {: RESULT=new Sentencia("","None"); :}
;

Valores ::= CARACTER:c 

{: 
  System.out.println("Entro en caracter");
RESULT=new Sentencia("",c); 
  System.out.println("Salgo en caracter");

:} 

|Bool_value:b 
{: RESULT=new Sentencia("",b.resultado); :} 

;
Numeros ::= NUM:n
{: RESULT=new Sentencia("",n.toString()); :} 
 
|NUMREAL:n
{: RESULT=new Sentencia("",n.toString()); :} 


;
Bool_value ::= 
TRUE
{: RESULT=new Sentencia("","True"); :} 
| FALSE
{: RESULT=new Sentencia("","False"); :} 
;
Tipo ::=  INTEGER |REAL |CHAR |BOOLEAN
;
//Funciones
DeclaracionFuncion ::= Tipo:t ID:s ABREPAR  CIERRAPAR ABRELLAVE {: 
								Simbolo sAux;

	TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									System.out.println("Insertando "+sAux.nombre);
									}
			this.parser.analizadorLexico.getTabla().set(); :}  
			ListaSentencias:ls
			 CIERRALLAVE {: 
			 this.parser.analizadorLexico.getTabla().reset();
			 Sentencia resultSent=new Sentencia("def "+s.nombre+"():\n"+ls.codigo,s.nombre);
			 RESULT=resultSent;
			 
			 :}

|  VOID ID:s ABREPAR  CIERRAPAR ABRELLAVE {: 
								Simbolo sAux;

	TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									System.out.println("Insertando "+sAux.nombre);
									}
			this.parser.analizadorLexico.getTabla().set(); :}  
			ListaSentencias:ls
			 CIERRALLAVE {: 
			 this.parser.analizadorLexico.getTabla().reset();
			 Sentencia resultSent=new Sentencia("def "+s.nombre+"():\n"+ls.codigo,s.nombre);
			 RESULT=resultSent;
			 
			 :}
;

ReturnSentencia ::= RETURN ExpresionNum:exprnum PTOYCOMA
{:RESULT=new Sentencia("return "+exprnum.codigo+"\n",""); :}

 | RETURN Valores:v PTOYCOMA
 
 {:RESULT=new Sentencia("return "+v.resultado+"\n",""); :}
  
;

ListaSentencias ::= ListaSentencias:ls1 Sentence:s 
{:System.out.println("Entro aqui: sentencia NO vacia:");
RESULT=new Sentencia(ls1.codigo+"\t"+s.codigo,""); 
:}
|
{:
RESULT=new Sentencia("",""); 
System.out.println("Entro aqui: sentencia vacia");
:}

;
Sentence ::= Asignacion:a PTOYCOMA 
{:
RESULT=new Sentencia(a.codigo,""); 
:}

| LlamadaFunc:lFunc PTOYCOMA{:
RESULT=new Sentencia(lFunc.codigo,""); 
:}
 | SenteicaIf:sif 
 {:RESULT=new Sentencia(sif.codigo,"");  :}
  | SentenciaWhile :sw
  
   {:RESULT=new Sentencia(sw.codigo,"");  :}
  
  |ReturnSentencia:rs 
{:RESULT=new Sentencia(rs.codigo,"");  :}
			
;
Asignacion ::= Tipo:t ID:s ASIG AsigTipo:as  
{: 
System.out.println("entro en asignacion");
Sentencia resultSent=new Sentencia(s.nombre+"="+as.resultado+"\n",s.nombre);
								RESULT=resultSent;
								s.valor=as.resultado;
								
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									}else{
									report_fatal_error("Variable ya declarada",this.parser.cur_token);
									
									}
										
									
									:}

|ID:s ASIG AsigTipo:as
{:
								
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									report_fatal_error("Variable no inicializada",this.parser.cur_token);
									
									}else{
									 Sentencia resultSent=new Sentencia(s.nombre+"="+as.resultado+"\n",s.nombre);
								RESULT=resultSent;
								s.valor=as.resultado;
									sAux.valor=as.resultado;
									
									}
										
									
									:}

 | ArrElement ASIG AsigTipo
;
ArrElement ::= ID ABRECOR NUM CIERRACOR DOSdim
;
AsigTipo ::= ExpresionNum:exprn
{:
RESULT = new Sentencia(exprn.codigo,exprn.codigo);
:}
  | LlamadaFunc:lF 
  {:
RESULT = new Sentencia(lF.codigo,lF.codigo);
:}

  |  Valores: v
  {:
  System.out.println("Entro en asig tipo valores");
RESULT = new Sentencia(v.resultado,v.resultado);
:}
;


Elemento ::= Numeros:num
{: RESULT=new Sentencia("",num.resultado); :} 

 | ID:s
   {:Simbolo sAux;
  	TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
  	if ((sAux=tabla.buscarGlobal(s.nombre))==null){
		report_fatal_error("Variable no inicializada",this.parser.cur_token);
	}
									
										
   RESULT=new Sentencia("",sAux.nombre); :}
;
ExpresionNum ::=  ExpresionNum:e1 MAS ExpresionNum:e2
{: 
	String temporal=nuevaTemporal();	
	Sentencia resultSent= new Sentencia(e1.codigo+"+"+e2.codigo,temporal);
	RESULT= resultSent; 
:}

| ExpresionNum:e1 MENOS ExpresionNum:e2
{: 
	String temporal=nuevaTemporal();	
	Sentencia resultSent= new Sentencia(e1.codigo+"-"+e2.codigo,temporal);
	RESULT= resultSent; 
:}

| ExpresionNum:e1 MULT ExpresionNum:e2 
{: 
	String temporal=nuevaTemporal();	
	Sentencia resultSent= new Sentencia(e1.codigo+"*"+e2.codigo,temporal);
	RESULT= resultSent; 
:}
| ExpresionNum:e1 DIV ExpresionNum:e2
{: 
	String temporal=nuevaTemporal();	
	Sentencia resultSent= new Sentencia(e1.codigo+"/"+e2.codigo,temporal);
	RESULT= resultSent; 
:}
| ExpresionNum:e1 MOD ExpresionNum:e2 
{: 
	String temporal=nuevaTemporal();	
	Sentencia resultSent= new Sentencia(e1.codigo+"%"+e2.codigo,temporal);
	RESULT= resultSent; 
:}
| Elemento:el
{: RESULT=new Sentencia(el.resultado,el.resultado); :} 

| MENOS ExpresionNum:e 
{: 
	String temporal=nuevaTemporal();	
	Sentencia resultSent= new Sentencia("-"+e.codigo,temporal);
	RESULT= resultSent; 
:}

| ABREPAR ExpresionNum:e CIERRAPAR 
{:
	String temporal=nuevaTemporal();	
	Sentencia resultSent= new Sentencia("("+e.codigo+")",temporal);
	RESULT= resultSent; 
:}

;



LlamadaFunc ::= ID:s ABREPAR ListaParam:l CIERRAPAR
{:
	Simbolo sAux;
	TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
  	if ((sAux=tabla.buscarGlobal(s.nombre))==null){
		report_fatal_error("Variable no inicializada",this.parser.cur_token);
	}
	Sentencia resultSent= new Sentencia(s.nombre+"("+l.codigo+")\n","");
	RESULT= resultSent; 
:}
;
ListaParam ::=  Elemento:elem  ListaParam_p:lp
{:
	Sentencia resultSent= new Sentencia(elem.resultado+lp.codigo,"");
	RESULT= resultSent; 
:}

 | {:
	RESULT = new Sentencia("","");
:}
;
ListaParam_p ::= 
{:
	RESULT = new Sentencia("","");
:}
| COMA Elemento:elem ListaParam_p:lp1 
{:
	
	RESULT = new Sentencia(","+elem.resultado+lp1.codigo,"");
:}
| COMA Valores:v ListaParam_p:lp1

{:	RESULT = new Sentencia(","+v.resultado+lp1.codigo,"");:}
;




ListaExprLogicas ::= ExprLogica:ex_logica1 AND ListaExprLogicas:l_exp
 {: RESULT= new Sentencia(ex_logica1.codigo +" and "+l_exp.codigo,""); :}
 | ExprLogica:ex_logica1 OR ListaExprLogicas:l_exp
  {: RESULT= new Sentencia(ex_logica1.codigo +" or "+l_exp.codigo,""); :}
 | ExprLogica:e
 {: 
 	System.out.println("Analizo expresion logica");
 	RESULT= new Sentencia(e.codigo,""); :}
;
ExprLogica ::= Expr:exprl TipoExpr:tipo_expr 
{:	RESULT = new Sentencia(exprl.codigo+tipo_expr.codigo ,""); :}

| ABREPAR Expr:exprl TipoExpr:tipo_expr CIERRAPAR 
;
TipoExpr ::= EQUAL Expr:exprl1
{:	RESULT = new Sentencia("=="+exprl1.codigo,""); :}
| NOT_EQUAL Expr:exprl1
{:	RESULT = new Sentencia("!="+exprl1.codigo,""); :}
 |BIGGER Expr:exprl1
{:	RESULT = new Sentencia(">"+exprl1.codigo,""); :} 
| BIGGER_EQUAL Expr:exprl1
{:	RESULT = new Sentencia(">="+exprl1.codigo,""); :}
 | SMALLER Expr:exprl1
{:	RESULT = new Sentencia("<"+exprl1.codigo,""); :}
  | SMALLER_EQUAL Expr:exprl1
{:	RESULT = new Sentencia("<="+exprl1.codigo,""); :}
  | NOT_EQUAL Valores:v
{:	RESULT = new Sentencia("!="+v.resultado,""); :}
  |EQUAL Valores:v
{:	RESULT = new Sentencia("=="+v.resultado,""); :}
;
Expr ::= ArrElement | Elemento:elemto
{:  	RESULT = new Sentencia(elemto.resultado,"");
:}
  
;

SenteicaIf ::= IF ABREPAR ListaExprLogicas:l_exp CIERRAPAR ABRELLAVE {:this.parser.analizadorLexico.getTabla().set();:} ListaSentencias:ls {:this.parser.analizadorLexico.getTabla().reset();:}CIERRALLAVE SentenciaElse:se
{:
	ls.codigo = ls.codigo.replace("\n", "\n\t");
	String codigo =  "if("+l_exp.codigo+"):\n\t"+ls.codigo+se.codigo;
	RESULT = new Sentencia(codigo+"\n","");

	
	:}
;
SentenciaElse::=  
{:	System.out.println("Entro en sentencia else");
	RESULT = new Sentencia("","");:}

| ELSE ABRELLAVE  {:this.parser.analizadorLexico.getTabla().set();:} ListaSentencias:ls CIERRALLAVE
{:
	
	
	this.parser.analizadorLexico.getTabla().reset();
	ls.codigo = ls.codigo.replace("\n", "\n\t");
		
	String codigo =  "else:\n\t"+ls.codigo;
	RESULT = new Sentencia(codigo+"\n","");

	
	:}

;


SentenciaWhile ::= WHILE ABREPAR ListaExprLogicas:l_exp CIERRAPAR {:this.parser.analizadorLexico.getTabla().set();:} ABRELLAVE ListaSentencias:ls CIERRALLAVE
{:	this.parser.analizadorLexico.getTabla().reset();
	ls.codigo = ls.codigo.replace("\n", "\n\t");
	String codigo =  "while("+l_exp.codigo+"):\n\t"+ls.codigo;
	RESULT = new Sentencia(codigo+"\n","");
:}

;




listaargumentos::=			/* Epsilon*/
			| ID:id DOSPUNTOS Tipo:l listaargumentos_p:a
			{: RESULT=l;
			/* Se busca en tabla de simbolos y se inserta o devuelve error*/
			:}
			
;
listaargumentos_p::=			/* Epsilon*/
	{: 
			:}
			
			| COMA ID:id DOSPUNTOS Tipo:a listaargumentos_p:l
			{: RESULT=a;
			/* Se busca en tabla de simbolos y se inserta o devuelve error*/
			:}
;
