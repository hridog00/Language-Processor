
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\030\003\000\002\030\003\000\002\031\005\000" +
    "\002\032\004\000\002\032\006\000\002\033\011\000\002" +
    "\034\002\000\002\034\005\000\002\035\004\000\002\035" +
    "\002\000\002\047\003\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\010\003\000\002\010\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\036\012\000\002\036\012\000\002\040" +
    "\005\000\002\040\002\000\002\041\003\000\002\041\003" +
    "\000\002\042\004\000\002\042\002\000\002\043\003\000" +
    "\002\043\004\000\002\043\004\000\002\043\003\000\002" +
    "\043\003\000\002\044\006\000\002\044\005\000\002\044" +
    "\005\000\002\045\007\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\024\003\000\002\024\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\020" +
    "\004\000\002\020\005\000\002\004\006\000\002\005\004" +
    "\000\002\005\002\000\002\007\002\000\002\007\005\000" +
    "\002\007\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\015\004\000\002\015\006\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\017\003\000\002\017\003\000\002" +
    "\011\012\000\002\012\002\000\002\012\006\000\002\013" +
    "\011\000\002\026\002\000\002\026\006\000\002\027\002" +
    "\000\002\027\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\020\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\044\ufffc\001\002\000\006\002\237\003\236" +
    "\001\002\000\020\002\001\003\001\004\011\005\016\006" +
    "\017\007\012\044\014\001\002\000\032\002\ufffa\003\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\013\ufffa\017\ufffa\042" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\001\002\000\020\002\ufffd" +
    "\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\044\ufffd\001" +
    "\002\000\004\046\227\001\002\000\004\046\uffeb\001\002" +
    "\000\004\046\uffe8\001\002\000\032\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb\017\ufffb\042\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\001\002\000\004\046\020\001" +
    "\002\000\020\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\044\ufffe\001\002\000\004\046\uffea\001\002\000" +
    "\004\046\uffe9\001\002\000\004\032\021\001\002\000\004" +
    "\033\022\001\002\000\004\043\023\001\002\000\024\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\013\uffe0\017\uffe0\042\uffe0" +
    "\045\uffe0\046\uffe0\001\002\000\024\004\011\005\016\006" +
    "\017\007\012\013\032\017\027\042\uffe4\045\031\046\034" +
    "\001\002\000\004\041\225\001\002\000\024\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\013\uffdc\017\uffdc\042\uffdc\045\uffdc" +
    "\046\uffdc\001\002\000\004\032\217\001\002\000\024\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\013\uffdb\017\uffdb\042\uffdb" +
    "\045\uffdb\046\uffdb\001\002\000\012\010\103\046\213\052" +
    "\101\053\102\001\002\000\004\032\144\001\002\000\004" +
    "\046\126\001\002\000\010\032\046\034\045\041\047\001" +
    "\002\000\004\042\044\001\002\000\024\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\013\uffe1\017\uffe1\042\uffe1\045\uffe1\046" +
    "\uffe1\001\002\000\024\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\013\uffdf\017\uffdf\042\uffdf\045\uffdf\046\uffdf\001\002\000" +
    "\004\040\043\001\002\000\004\040\042\001\002\000\024" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\013\uffdd\017\uffdd\042" +
    "\uffdd\045\uffdd\046\uffdd\001\002\000\024\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\013\uffde\017\uffde\042\uffde\045\uffde\046" +
    "\uffde\001\002\000\020\002\uffe6\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\044\uffe6\001\002\000\004\047\120\001" +
    "\002\000\004\033\uffc7\001\002\000\020\021\052\032\056" +
    "\040\ufff2\041\060\046\061\047\051\051\055\001\002\000" +
    "\004\040\uffd9\001\002\000\040\011\uffef\012\uffef\015\uffef" +
    "\016\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\033\uffef\040\uffef\001\002" +
    "\000\014\021\052\032\056\046\071\047\051\051\055\001" +
    "\002\000\020\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\033\uffcc\040\uffcc\001\002\000\004\040\uffd4\001\002\000" +
    "\040\011\uffee\012\uffee\015\uffee\016\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\033\uffee\040\uffee\001\002\000\014\021\052\032\056" +
    "\046\071\047\051\051\055\001\002\000\040\011\uffd3\012" +
    "\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\040" +
    "\uffd3\001\002\000\010\010\103\052\101\053\102\001\002" +
    "\000\020\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\032" +
    "\046\040\uffd2\001\002\000\004\040\uffd6\001\002\000\016" +
    "\020\066\021\067\022\065\023\070\024\064\040\uffd5\001" +
    "\002\000\014\021\052\032\056\046\071\047\051\051\055" +
    "\001\002\000\014\021\052\032\056\046\071\047\051\051" +
    "\055\001\002\000\014\021\052\032\056\046\071\047\051" +
    "\051\055\001\002\000\014\021\052\032\056\046\071\047" +
    "\051\051\055\001\002\000\014\021\052\032\056\046\071" +
    "\047\051\051\055\001\002\000\020\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\033\uffd2\040\uffd2\001\002\000\020" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\033\uffce\040" +
    "\uffce\001\002\000\020\020\uffd0\021\uffd0\022\065\023\070" +
    "\024\064\033\uffd0\040\uffd0\001\002\000\020\020\uffd1\021" +
    "\uffd1\022\065\023\070\024\064\033\uffd1\040\uffd1\001\002" +
    "\000\020\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\033" +
    "\uffcf\040\uffcf\001\002\000\020\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\033\uffcd\040\uffcd\001\002\000\014\011" +
    "\ufff0\012\ufff0\033\ufff0\037\ufff0\040\ufff0\001\002\000\006" +
    "\037\ufff3\040\ufff3\001\002\000\014\011\uffed\012\uffed\033" +
    "\uffed\037\uffed\040\uffed\001\002\000\014\011\uffec\012\uffec" +
    "\033\uffec\037\uffec\040\uffec\001\002\000\014\011\ufff1\012" +
    "\ufff1\033\ufff1\037\ufff1\040\ufff1\001\002\000\016\020\066" +
    "\021\067\022\065\023\070\024\064\033\105\001\002\000" +
    "\020\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\033\uffca" +
    "\040\uffca\001\002\000\020\020\uffcb\021\uffcb\022\065\023" +
    "\070\024\064\033\uffcb\040\uffcb\001\002\000\006\033\uffc6" +
    "\037\112\001\002\000\004\033\111\001\002\000\004\040" +
    "\uffc9\001\002\000\012\010\103\046\114\052\101\053\102" +
    "\001\002\000\004\033\uffc8\001\002\000\006\033\uffc6\037" +
    "\112\001\002\000\006\033\uffc6\037\112\001\002\000\004" +
    "\033\uffc4\001\002\000\004\033\uffc5\001\002\000\004\035" +
    "\121\001\002\000\030\011\ufff5\012\ufff5\015\ufff5\016\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\123\041" +
    "\ufff5\001\002\000\026\011\uffd7\012\uffd7\015\uffd7\016\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\041\uffd7\001" +
    "\002\000\004\050\124\001\002\000\004\035\125\001\002" +
    "\000\030\011\ufff4\012\ufff4\015\ufff4\016\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\033\ufff4\040\ufff4\041\ufff4\001\002" +
    "\000\012\034\134\037\ufff2\040\ufff2\041\136\001\002\000" +
    "\006\037\130\040\131\001\002\000\004\046\132\001\002" +
    "\000\032\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\013\ufff9\017\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\001\002\000\010\037\ufff2\040\ufff2\041\060\001\002\000" +
    "\006\037\ufff7\040\ufff7\001\002\000\004\047\140\001\002" +
    "\000\006\037\ufff8\040\ufff8\001\002\000\026\010\103\021" +
    "\052\032\056\040\ufff2\041\060\046\061\047\051\051\055" +
    "\052\101\053\102\001\002\000\004\040\uffda\001\002\000" +
    "\004\035\141\001\002\000\006\034\123\040\ufff5\001\002" +
    "\000\004\040\143\001\002\000\032\002\ufff6\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\013\ufff6\017\ufff6\042\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\001\002\000\012\032\147\046" +
    "\151\047\051\051\055\001\002\000\016\015\175\016\172" +
    "\026\177\027\174\030\176\031\200\001\002\000\024\011" +
    "\uffb5\012\uffb5\015\uffb5\016\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\033\uffb5\001\002\000\010\046\151\047\051\051" +
    "\055\001\002\000\024\011\uffb6\012\uffb6\015\uffb6\016\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\001\002\000" +
    "\026\011\uffd2\012\uffd2\015\uffd2\016\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\033\uffd2\034\045\001\002\000\010\011" +
    "\165\012\166\033\uffc1\001\002\000\004\033\154\001\002" +
    "\000\004\043\155\001\002\000\022\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\013\uffe0\017\uffe0\042\uffe0\046\uffe0\001\002" +
    "\000\022\004\011\005\016\006\017\007\012\013\032\017" +
    "\027\042\157\046\034\001\002\000\026\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\013\uffb3\014\160\017\uffb3\042\uffb3\045" +
    "\uffb3\046\uffb3\001\002\000\004\043\162\001\002\000\024" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\013\uffb4\017\uffb4\042" +
    "\uffb4\045\uffb4\046\uffb4\001\002\000\022\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\013\uffe0\017\uffe0\042\uffe0\046\uffe0\001" +
    "\002\000\022\004\011\005\016\006\017\007\012\013\032" +
    "\017\027\042\164\046\034\001\002\000\024\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\013\uffb2\017\uffb2\042\uffb2\045\uffb2" +
    "\046\uffb2\001\002\000\012\032\147\046\151\047\051\051" +
    "\055\001\002\000\012\032\147\046\151\047\051\051\055" +
    "\001\002\000\004\033\uffc2\001\002\000\004\033\uffc3\001" +
    "\002\000\016\015\175\016\172\026\177\027\174\030\176" +
    "\031\200\001\002\000\016\010\103\046\151\047\051\051" +
    "\055\052\101\053\102\001\002\000\004\033\207\001\002" +
    "\000\010\046\151\047\051\051\055\001\002\000\016\010" +
    "\103\046\151\047\051\051\055\052\101\053\102\001\002" +
    "\000\010\046\151\047\051\051\055\001\002\000\010\046" +
    "\151\047\051\051\055\001\002\000\010\046\151\047\051" +
    "\051\055\001\002\000\010\011\uffb9\012\uffb9\033\uffb9\001" +
    "\002\000\010\011\uffbc\012\uffbc\033\uffbc\001\002\000\010" +
    "\011\uffba\012\uffba\033\uffba\001\002\000\010\011\uffbe\012" +
    "\uffbe\033\uffbe\001\002\000\010\011\uffb7\012\uffb7\033\uffb7" +
    "\001\002\000\010\011\uffbb\012\uffbb\033\uffbb\001\002\000" +
    "\010\011\uffbf\012\uffbf\033\uffbf\001\002\000\010\011\uffbd" +
    "\012\uffbd\033\uffbd\001\002\000\010\011\uffb8\012\uffb8\033" +
    "\uffb8\001\002\000\010\011\uffc0\012\uffc0\033\uffc0\001\002" +
    "\000\004\040\uffe3\001\002\000\004\040\uffe2\001\002\000" +
    "\004\040\216\001\002\000\004\042\uffe5\001\002\000\012" +
    "\032\147\046\151\047\051\051\055\001\002\000\004\033" +
    "\221\001\002\000\004\043\222\001\002\000\022\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\013\uffe0\017\uffe0\042\uffe0\046" +
    "\uffe0\001\002\000\022\004\011\005\016\006\017\007\012" +
    "\013\032\017\027\042\224\046\034\001\002\000\024\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\013\uffb1\017\uffb1\042\uffb1" +
    "\045\uffb1\046\uffb1\001\002\000\020\021\052\032\056\040" +
    "\ufff2\041\060\046\061\047\051\051\055\001\002\000\004" +
    "\040\uffd8\001\002\000\014\032\230\034\134\037\ufff2\040" +
    "\ufff2\041\060\001\002\000\004\033\231\001\002\000\004" +
    "\043\232\001\002\000\024\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\013\uffe0\017\uffe0\042\uffe0\045\uffe0\046\uffe0\001\002" +
    "\000\024\004\011\005\016\006\017\007\012\013\032\017" +
    "\027\042\uffe4\045\031\046\034\001\002\000\004\042\235" +
    "\001\002\000\020\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\044\uffe7\001\002\000\004\040\240\001\002" +
    "\000\004\002\000\001\002\000\006\002\uffff\003\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\014\030\014\031\012\033\005\036\006\051\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\023\001\001\000\030\004" +
    "\040\011\025\013\027\030\036\031\012\033\005\040\034" +
    "\043\035\044\037\045\024\051\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\076\041\214\047\213\001\001\000\002\001" +
    "\001\000\004\032\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\107\006" +
    "\106\001\001\000\016\004\053\020\062\024\052\035\061" +
    "\046\047\050\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\105\024\052\050\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\103\024\052\050\056\001\001\000\002\001\001\000\006" +
    "\010\076\047\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\075\024\052\050\056" +
    "\001\001\000\010\020\074\024\052\050\056\001\001\000" +
    "\010\020\073\024\052\050\056\001\001\000\010\020\072" +
    "\024\052\050\056\001\001\000\010\020\071\024\052\050" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\076\047" +
    "\114\001\001\000\002\001\001\000\004\007\116\001\001" +
    "\000\004\007\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\053\010\076\020\062\024\052\035\061\046\136\047" +
    "\077\050\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\152\015\151\017\144\024\145\045\147" +
    "\050\056\001\001\000\004\016\211\001\001\000\002\001" +
    "\001\000\012\017\170\024\145\045\147\050\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\155\001\001" +
    "\000\026\004\040\011\025\013\027\030\036\031\012\033" +
    "\005\043\035\044\037\045\024\051\032\001\001\000\004" +
    "\012\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\162\001\001\000\026\004\040\011\025\013\027" +
    "\030\036\031\012\033\005\043\035\044\037\045\024\051" +
    "\032\001\001\000\002\001\001\000\016\014\167\015\151" +
    "\017\144\024\145\045\147\050\056\001\001\000\014\015" +
    "\166\017\144\024\145\045\147\050\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\172\001\001\000" +
    "\016\010\076\017\207\024\145\045\147\047\210\050\056" +
    "\001\001\000\002\001\001\000\012\017\205\024\145\045" +
    "\147\050\056\001\001\000\016\010\076\017\203\024\145" +
    "\045\147\047\204\050\056\001\001\000\012\017\202\024" +
    "\145\045\147\050\056\001\001\000\012\017\201\024\145" +
    "\045\147\050\056\001\001\000\012\017\200\024\145\045" +
    "\147\050\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\217" +
    "\015\151\017\144\024\145\045\147\050\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\222\001\001" +
    "\000\026\004\040\011\025\013\027\030\036\031\012\033" +
    "\005\043\035\044\037\045\024\051\032\001\001\000\002" +
    "\001\001\000\016\004\053\020\062\024\052\035\061\046" +
    "\225\050\056\001\001\000\002\001\001\000\004\035\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\232\001\001\000\030\004\040\011\025\013\027\030\036" +
    "\031\012\033\005\040\233\043\035\044\037\045\024\051" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico= analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis con token: "+sym.terminalNames[current_token.sym]+" en linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);
  
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= listaDeclaraciones 
            {
              Object RESULT =null;
		 System.out.println("Empieza el programa"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa error PTOYCOMA 
            {
              Object RESULT =null;
		 this.parser.error_sintactico(this.parser.cur_token);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaDeclaraciones ::= listaDeclaraciones DeclaracionVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaDeclaraciones ::= listaDeclaraciones DeclaracionFuncion 
            {
              Object RESULT =null;
		System.out.println("Declaracion FUNCION");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaDeclaraciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclaracionVar ::= DeclaracionTipoBasico 
            {
              Object RESULT =null;
		System.out.println("Declaracion VAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclaracionVar ::= DeclaracionArr 
            {
              Object RESULT =null;
		System.out.println("Declaracion array");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionTipoBasico ::= Tipo ListaValores PTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Declaracion tipo baisco");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionTipoBasico",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListaValores ::= ID AsignacionDecl 
            {
              Object RESULT =null;
		System.out.println("LISTA VALORES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaValores",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListaValores ::= ListaValores COMA ID AsignacionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaValores",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclaracionArr ::= Tipo ID ABRECOR NUM CIERRACOR DOSdim PTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Declaracion array");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionArr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DOSdim ::= 
            {
              Object RESULT =null;
		System.out.println("Vacio");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOSdim",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DOSdim ::= ABRECOR DIM CIERRACOR 
            {
              Object RESULT =null;
		System.out.println("2 dim");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOSdim",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AsignacionDecl ::= ASIG Valores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsignacionDecl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AsignacionDecl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsignacionDecl",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Valores ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Valores ::= Bool_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Numeros ::= NUM 
            {
              Object RESULT =null;
		System.out.println("Numero");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Numeros",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Numeros ::= NUMREAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Numeros",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Bool_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Bool_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeclaracionFuncion ::= Tipo ID ABREPAR CIERRAPAR ABRELLAVE ListaSentencias ReturnSentencia CIERRALLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DeclaracionFuncion ::= VOID ID ABREPAR CIERRAPAR ABRELLAVE ListaSentencias ReturnSentencia CIERRALLAVE 
            {
              Object RESULT =null;
		System.out.println("Funcion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ReturnSentencia ::= RETURN ReturnTipo PTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("return");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnSentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ReturnSentencia ::= 
            {
              Object RESULT =null;
		System.out.println("Vacio");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnSentencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ReturnTipo ::= ID 
            {
              Object RESULT =null;
		System.out.println("id ret");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnTipo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReturnTipo ::= Valores 
            {
              Object RESULT =null;
		System.out.println("valores res");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnTipo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListaSentencias ::= ListaSentencias Sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaSentencias",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaSentencias ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaSentencias",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sentencia ::= DeclaracionVar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Sentencia ::= Asignacion PTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencia ::= LlamadaFunc PTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencia ::= SenteicaIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sentencia ::= SentenciaWhile 
            {
              Object RESULT =null;
		System.out.println("Sentencia");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Asignacion ::= Tipo ID ASIG AsigTipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignacion ::= ID ASIG AsigTipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Asignacion ::= ArrElement ASIG AsigTipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ArrElement ::= ID ABRECOR NUM CIERRACOR DOSdim 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrElement",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AsigTipo ::= AsignacionDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigTipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AsigTipo ::= ExpresionNum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigTipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AsigTipo ::= LlamadaFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigTipo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Elemento ::= Numeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Elemento ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpresionNum ::= ExpresionNum MAS ExpresionNum 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpresionNum ::= ExpresionNum MENOS ExpresionNum 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpresionNum ::= ExpresionNum MULT ExpresionNum 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpresionNum ::= ExpresionNum DIV ExpresionNum 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionNum ::= ExpresionNum MOD ExpresionNum 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionNum ::= Elemento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpresionNum ::= MENOS ExpresionNum 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpresionNum ::= ABREPAR ExpresionNum CIERRAPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LlamadaFunc ::= ID ABREPAR ListaParam CIERRAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaFunc",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListaParam ::= Elem ListaParam_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListaParam ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListaParam_p ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam_p",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListaParam_p ::= COMA ID ListaParam_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam_p",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListaParam_p ::= COMA Valores ListaParam_p 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam_p",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListaExprLogicas ::= ExprLogica AND ListaExprLogicas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExprLogicas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListaExprLogicas ::= ExprLogica OR ExprLogica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExprLogicas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListaExprLogicas ::= ExprLogica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExprLogicas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprLogica ::= Expr TipoExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprLogica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExprLogica ::= ABREPAR Expr TipoExpr CIERRAPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprLogica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TipoExpr ::= EQUAL Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TipoExpr ::= NOT_EQUAL Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TipoExpr ::= BIGGER Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TipoExpr ::= BIGGER_EQUAL Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TipoExpr ::= SMALLER Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TipoExpr ::= SMALLER_EQUAL Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TipoExpr ::= NOT_EQUAL Valores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TipoExpr ::= EQUAL Valores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= ArrElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Elemento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SenteicaIf ::= IF ABREPAR ListaExprLogicas CIERRAPAR ABRELLAVE ListaSentencias CIERRALLAVE SentenciaElse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SenteicaIf",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentenciaElse",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SentenciaElse ::= ELSE ABRELLAVE ListaSentencias CIERRALLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentenciaElse",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SentenciaWhile ::= WHILE ABREPAR ListaExprLogicas CIERRAPAR ABRELLAVE ListaSentencias CIERRALLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentenciaWhile",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listaargumentos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listaargumentos ::= ID DOSPUNTOS Tipo listaargumentos_p 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=l;
			/* Se busca en tabla de simbolos y se inserta o devuelve error*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listaargumentos_p ::= 
            {
              Object RESULT =null;
		 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos_p",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listaargumentos_p ::= COMA ID DOSPUNTOS Tipo listaargumentos_p 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a;
			/* Se busca en tabla de simbolos y se inserta o devuelve error*/
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos_p",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
