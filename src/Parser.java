
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\013\003\000\002\002\004\000\002\013" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\037\011\000\002\040\002\000\002" +
    "\040\005\000\002\007\004\000\002\007\002\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\033\003\000\002\033\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\047\002\000\002\050\002\000\002\010\015\000\002\051" +
    "\002\000\002\052\002\000\002\053\002\000\002\010\015" +
    "\000\002\034\005\000\002\034\005\000\002\011\004\000" +
    "\002\011\002\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\002\006\000\002\002\005\000\002\002\005\000" +
    "\002\042\007\000\002\041\002\000\002\041\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\004\000\002" +
    "\026\005\000\002\030\006\000\002\031\004\000\002\031" +
    "\004\000\002\031\002\000\002\032\002\000\002\032\005" +
    "\000\002\032\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\023\004\000\002\023\006\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\025\003\000\002\054\002\000" +
    "\002\055\002\000\002\014\014\000\002\015\002\000\002" +
    "\056\002\000\002\015\007\000\002\057\002\000\002\016" +
    "\012\000\002\035\002\000\002\035\005\000\002\036\002" +
    "\000\002\036\006\000\002\046\007\000\002\017\007\000" +
    "\002\020\002\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\021\002\000\002\021\005\000\002\021" +
    "\005\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\022\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\043\ufffc\045\005\001\002\000\006\002\314" +
    "\003\313\001\002\000\020\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\043\ufffb\001\002\000\020\002\001" +
    "\003\001\004\012\005\017\006\020\007\013\043\015\001" +
    "\002\000\020\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\043\ufff9\001\002\000\020\002\ufffd\003\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\043\ufffd\001\002\000\004" +
    "\050\270\001\002\000\004\050\uffec\001\002\000\004\050" +
    "\uffe9\001\002\000\020\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\043\ufffa\001\002\000\004\050\021\001" +
    "\002\000\020\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\043\ufffe\001\002\000\004\050\uffeb\001\002\000" +
    "\004\050\uffea\001\002\000\004\032\uffe5\001\002\000\004" +
    "\032\023\001\002\000\014\004\012\005\017\006\020\007" +
    "\013\033\uffa3\001\002\000\004\050\262\001\002\000\004" +
    "\033\uffe4\001\002\000\004\033\027\001\002\000\004\042" +
    "\030\001\002\000\030\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\014\uffe3\020\uffe3\041\uffe3\045\uffe3\050" +
    "\uffe3\001\002\000\030\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\014\uffde\020\uffde\041\uffde\045\uffde\050" +
    "\uffde\001\002\000\030\004\012\005\017\006\020\007\013" +
    "\010\034\011\046\014\042\020\036\041\037\045\050\050" +
    "\044\001\002\000\004\040\260\001\002\000\004\032\254" +
    "\001\002\000\032\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\014\uffda\020\uffda\041\uffda\044\uffda\045\uffda" +
    "\050\uffda\001\002\000\004\032\245\001\002\000\020\002" +
    "\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\043\uffe2" +
    "\001\002\000\032\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\014\uffd9\020\uffd9\041\uffd9\044\uffd9\045\uffd9" +
    "\050\uffd9\001\002\000\032\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\014\uffd5\020\uffd5\041\uffd5\044\uffd5" +
    "\045\uffd5\050\uffd5\001\002\000\004\032\175\001\002\000" +
    "\004\050\161\001\002\000\010\032\117\034\074\040\120" +
    "\001\002\000\032\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\014\uffdf\020\uffdf\041\uffdf\044\uffdf\045\uffdf" +
    "\050\uffdf\001\002\000\004\032\056\001\002\000\004\037" +
    "\055\001\002\000\032\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\014\uffd7\020\uffd7\041\uffd7\044\uffd7\045" +
    "\uffd7\050\uffd7\001\002\000\032\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\014\uffdd\020\uffdd\041\uffdd\044" +
    "\uffdd\045\uffdd\050\uffdd\001\002\000\032\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\014\uffd6\020\uffd6\041" +
    "\uffd6\044\uffd6\045\uffd6\050\uffd6\001\002\000\004\037\054" +
    "\001\002\000\032\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\014\uffdb\020\uffdb\041\uffdb\044\uffdb\045\uffdb" +
    "\050\uffdb\001\002\000\032\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\014\uffdc\020\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\050\uffdc\001\002\000\022\033\uff9d\046\060\047" +
    "\073\050\071\051\057\052\064\053\063\054\070\001\002" +
    "\000\060\012\ufff0\013\ufff0\016\ufff0\017\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\033\ufff0\036\ufff0\037\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\001\002\000\006" +
    "\021\103\033\uff99\001\002\000\006\021\103\033\uff99\001" +
    "\002\000\004\033\113\001\002\000\016\012\uffee\013\uffee" +
    "\021\uffee\033\uffee\036\uffee\037\uffee\001\002\000\060\012" +
    "\uffef\013\uffef\016\uffef\017\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\033" +
    "\uffef\036\uffef\037\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\001\002\000\060\012\uffcb\013" +
    "\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\036" +
    "\uffcb\037\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\001\002\000\060\012\uffc9\013\uffc9\016" +
    "\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\036\uffc9\037" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\001\002\000\006\021\103\033\uff99\001\002\000" +
    "\016\012\uffed\013\uffed\021\uffed\033\uffed\036\uffed\037\uffed" +
    "\001\002\000\062\012\uffca\013\uffca\016\uffca\017\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\uffca\034\074\036\uffca\037\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\001\002\000\016\012\ufff1\013\ufff1\021\ufff1\033\ufff1\036" +
    "\ufff1\037\ufff1\001\002\000\016\012\ufff2\013\ufff2\021\ufff2" +
    "\033\ufff2\036\ufff2\037\ufff2\001\002\000\004\051\075\001" +
    "\002\000\004\035\076\001\002\000\064\012\uffd0\013\uffd0" +
    "\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034\077" +
    "\036\uffd0\037\uffd0\040\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\001\002\000\004\051\101" +
    "\001\002\000\062\012\uffd1\013\uffd1\016\uffd1\017\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\033\uffd1\036\uffd1\037\uffd1\040\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\001\002\000\004\035\102\001\002\000\062\012\uffcf\013" +
    "\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\001\002\000\020\046\105\047" +
    "\073\050\071\051\057\052\064\053\063\054\070\001\002" +
    "\000\004\033\uff9b\001\002\000\006\021\103\033\uff99\001" +
    "\002\000\022\033\uff9d\046\060\047\073\050\071\051\057" +
    "\052\064\053\063\054\070\001\002\000\006\021\103\033" +
    "\uff99\001\002\000\004\033\uff98\001\002\000\004\033\uff97" +
    "\001\002\000\004\033\uff96\001\002\000\004\037\114\001" +
    "\002\000\032\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\014\uff9e\020\uff9e\041\uff9e\044\uff9e\045\uff9e\050" +
    "\uff9e\001\002\000\004\033\uff9a\001\002\000\004\033\uff9c" +
    "\001\002\000\020\033\uffbd\047\073\050\071\051\057\052" +
    "\064\053\063\054\070\001\002\000\022\022\122\032\125" +
    "\047\073\050\130\051\057\052\064\053\063\054\070\001" +
    "\002\000\004\037\uffd3\001\002\000\014\022\122\032\125" +
    "\050\071\051\057\052\064\001\002\000\020\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\033\uffc3\037\uffc3\001\002" +
    "\000\004\037\uffcd\001\002\000\014\022\122\032\125\050" +
    "\071\051\057\052\064\001\002\000\004\037\uffcc\001\002" +
    "\000\016\021\133\022\134\023\132\024\135\025\131\037" +
    "\uffce\001\002\000\022\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\032\117\034\074\037\uffca\001\002\000\014\022" +
    "\122\032\125\050\071\051\057\052\064\001\002\000\014" +
    "\022\122\032\125\050\071\051\057\052\064\001\002\000" +
    "\014\022\122\032\125\050\071\051\057\052\064\001\002" +
    "\000\014\022\122\032\125\050\071\051\057\052\064\001" +
    "\002\000\014\022\122\032\125\050\071\051\057\052\064" +
    "\001\002\000\020\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\033\uffc5\037\uffc5\001\002\000\020\021\uffc7\022\uffc7" +
    "\023\132\024\135\025\131\033\uffc7\037\uffc7\001\002\000" +
    "\020\021\uffc8\022\uffc8\023\132\024\135\025\131\033\uffc8" +
    "\037\uffc8\001\002\000\020\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\033\uffc6\037\uffc6\001\002\000\020\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\033\uffc4\037\uffc4\001" +
    "\002\000\016\021\133\022\134\023\132\024\135\025\131" +
    "\033\144\001\002\000\020\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\033\uffc1\037\uffc1\001\002\000\020\021\uffc2" +
    "\022\uffc2\023\132\024\135\025\131\033\uffc2\037\uffc2\001" +
    "\002\000\006\033\uffbc\036\152\001\002\000\006\033\uffbc" +
    "\036\152\001\002\000\004\033\151\001\002\000\004\037" +
    "\uffc0\001\002\000\016\047\073\050\071\051\057\052\064" +
    "\053\063\054\070\001\002\000\004\033\uffbe\001\002\000" +
    "\006\033\uffbc\036\152\001\002\000\006\033\uffbc\036\152" +
    "\001\002\000\004\033\uffba\001\002\000\004\033\uffbb\001" +
    "\002\000\004\033\uffbf\001\002\000\010\034\162\037\163" +
    "\040\164\001\002\000\004\051\166\001\002\000\032\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8" +
    "\020\uffd8\041\uffd8\044\uffd8\045\uffd8\050\uffd8\001\002\000" +
    "\022\022\122\032\125\047\073\050\130\051\057\052\064" +
    "\053\063\054\070\001\002\000\004\037\uffd4\001\002\000" +
    "\004\035\167\001\002\000\006\034\171\037\ufff6\001\002" +
    "\000\004\037\174\001\002\000\004\051\172\001\002\000" +
    "\004\035\173\001\002\000\004\037\ufff5\001\002\000\040" +
    "\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\014\ufff7\020\ufff7\041\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\050\ufff7\001\002\000\012\032\200\050\071\051" +
    "\057\052\064\001\002\000\016\016\227\017\224\026\231" +
    "\027\226\030\230\031\232\001\002\000\024\012\uffac\013" +
    "\uffac\016\uffac\017\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\033\uffac\001\002\000\010\050\071\051\057\052\064\001" +
    "\002\000\010\012\217\013\220\033\uffb7\001\002\000\004" +
    "\033\203\001\002\000\004\042\204\001\002\000\030\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\014\uffab" +
    "\020\uffab\041\uffab\045\uffab\050\uffab\001\002\000\030\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\014\uffde" +
    "\020\uffde\041\uffde\045\uffde\050\uffde\001\002\000\030\004" +
    "\012\005\017\006\020\007\013\010\034\011\046\014\042" +
    "\020\036\041\uffaa\045\050\050\044\001\002\000\004\041" +
    "\210\001\002\000\034\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\014\uffa8\015\211\020\uffa8\041\uffa8\044" +
    "\uffa8\045\uffa8\050\uffa8\001\002\000\004\042\213\001\002" +
    "\000\032\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\014\uffa9\020\uffa9\041\uffa9\044\uffa9\045\uffa9\050\uffa9" +
    "\001\002\000\030\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\014\uffa7\020\uffa7\041\uffa7\045\uffa7\050\uffa7" +
    "\001\002\000\030\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\014\uffde\020\uffde\041\uffde\045\uffde\050\uffde" +
    "\001\002\000\030\004\012\005\017\006\020\007\013\010" +
    "\034\011\046\014\042\020\036\041\216\045\050\050\044" +
    "\001\002\000\032\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\014\uffa6\020\uffa6\041\uffa6\044\uffa6\045\uffa6" +
    "\050\uffa6\001\002\000\012\032\200\050\071\051\057\052" +
    "\064\001\002\000\012\032\200\050\071\051\057\052\064" +
    "\001\002\000\004\033\uffb8\001\002\000\004\033\uffb9\001" +
    "\002\000\016\016\227\017\224\026\231\027\226\030\230" +
    "\031\232\001\002\000\016\047\073\050\071\051\057\052" +
    "\064\053\063\054\070\001\002\000\004\033\241\001\002" +
    "\000\010\050\071\051\057\052\064\001\002\000\016\047" +
    "\073\050\071\051\057\052\064\053\063\054\070\001\002" +
    "\000\010\050\071\051\057\052\064\001\002\000\010\050" +
    "\071\051\057\052\064\001\002\000\010\050\071\051\057" +
    "\052\064\001\002\000\010\012\uffaf\013\uffaf\033\uffaf\001" +
    "\002\000\010\012\uffb2\013\uffb2\033\uffb2\001\002\000\010" +
    "\012\uffb0\013\uffb0\033\uffb0\001\002\000\010\012\uffb4\013" +
    "\uffb4\033\uffb4\001\002\000\010\012\uffad\013\uffad\033\uffad" +
    "\001\002\000\010\012\uffb1\013\uffb1\033\uffb1\001\002\000" +
    "\010\012\uffb5\013\uffb5\033\uffb5\001\002\000\010\012\uffb3" +
    "\013\uffb3\033\uffb3\001\002\000\010\012\uffae\013\uffae\033" +
    "\uffae\001\002\000\010\012\uffb6\013\uffb6\033\uffb6\001\002" +
    "\000\012\032\200\050\071\051\057\052\064\001\002\000" +
    "\004\033\247\001\002\000\004\042\uffa5\001\002\000\004" +
    "\042\251\001\002\000\030\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\014\uffde\020\uffde\041\uffde\045\uffde" +
    "\050\uffde\001\002\000\030\004\012\005\017\006\020\007" +
    "\013\010\034\011\046\014\042\020\036\041\253\045\050" +
    "\050\044\001\002\000\032\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\014\uffa4\020\uffa4\041\uffa4\044\uffa4" +
    "\045\uffa4\050\uffa4\001\002\000\004\050\255\001\002\000" +
    "\004\033\256\001\002\000\004\037\257\001\002\000\032" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\014" +
    "\uff9f\020\uff9f\041\uff9f\044\uff9f\045\uff9f\050\uff9f\001\002" +
    "\000\022\022\122\032\125\047\073\050\130\051\057\052" +
    "\064\053\063\054\070\001\002\000\004\037\uffd2\001\002" +
    "\000\006\033\uffa1\036\263\001\002\000\012\004\012\005" +
    "\017\006\020\007\013\001\002\000\004\033\uffa2\001\002" +
    "\000\004\050\266\001\002\000\006\033\uffa1\036\263\001" +
    "\002\000\004\033\uffa0\001\002\000\012\032\uffe8\034\162" +
    "\037\ufff3\040\273\001\002\000\004\032\276\001\002\000" +
    "\004\037\275\001\002\000\010\047\073\053\063\054\070" +
    "\001\002\000\004\037\ufff4\001\002\000\020\002\ufff8\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\043\ufff8\001\002" +
    "\000\014\004\012\005\017\006\020\007\013\033\uffa3\001" +
    "\002\000\004\033\uffe7\001\002\000\004\033\301\001\002" +
    "\000\004\042\302\001\002\000\030\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\014\uffde\020\uffde\044\uffde" +
    "\045\uffde\050\uffde\001\002\000\030\004\012\005\017\006" +
    "\020\007\013\010\034\011\046\014\042\020\036\044\304" +
    "\045\050\050\044\001\002\000\022\022\122\032\125\047" +
    "\073\050\071\051\057\052\064\053\063\054\070\001\002" +
    "\000\004\041\306\001\002\000\020\002\uffe6\003\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\043\uffe6\001\002\000\004" +
    "\037\312\001\002\000\016\021\133\022\134\023\132\024" +
    "\135\025\131\037\311\001\002\000\004\041\uffe1\001\002" +
    "\000\004\041\uffe0\001\002\000\004\037\315\001\002\000" +
    "\004\002\000\001\002\000\006\002\uffff\003\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\004\005\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\015\006\013\010\007" +
    "\037\006\045\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\021\001\001" +
    "\000\002\001\001\000\006\035\024\045\023\001\001\000" +
    "\002\001\001\000\004\052\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\030\001\001\000\004\011" +
    "\031\001\001\000\026\002\046\012\044\014\034\016\037" +
    "\017\040\030\052\037\050\042\032\045\042\046\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\061\027\060\033\071\042\065\043\066\044\064" +
    "\001\001\000\002\001\001\000\004\021\115\001\001\000" +
    "\004\021\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\027\105\033\071\042\065\043\106\044\064\001\001" +
    "\000\002\001\001\000\004\021\111\001\001\000\016\020" +
    "\110\027\060\033\071\042\065\043\066\044\064\001\001" +
    "\000\004\021\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\145\031" +
    "\147\033\071\042\065\043\146\044\064\001\001\000\022" +
    "\003\120\026\126\027\122\030\123\033\071\042\065\043" +
    "\125\044\064\001\001\000\002\001\001\000\012\026\144" +
    "\027\122\042\065\044\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\142\027\122\042\065\044\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\141\027\122\042\065\044\064\001\001" +
    "\000\012\026\140\027\122\042\065\044\064\001\001\000" +
    "\012\026\137\027\122\042\065\044\064\001\001\000\012" +
    "\026\136\027\122\042\065\044\064\001\001\000\012\026" +
    "\135\027\122\042\065\044\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\157\001\001\000\004\032\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\027\153" +
    "\033\071\042\065\043\154\044\064\001\001\000\002\001" +
    "\001\000\004\032\156\001\001\000\004\032\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\164\026\126\027\122\030\123\033\071\042\065\043" +
    "\125\044\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\201\023\200\025\175\027\176\042\065\044" +
    "\064\001\001\000\004\024\243\001\001\000\002\001\001" +
    "\000\012\025\222\027\176\042\065\044\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\204\001\001\000\004\011\205\001\001\000\030\002" +
    "\046\012\044\014\034\016\037\017\040\030\052\037\050" +
    "\042\032\045\042\046\051\055\206\001\001\000\002\001" +
    "\001\000\004\015\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\213\001\001\000\004\011\214\001" +
    "\001\000\026\002\046\012\044\014\034\016\037\017\040" +
    "\030\052\037\050\042\032\045\042\046\051\001\001\000" +
    "\002\001\001\000\016\022\221\023\200\025\175\027\176" +
    "\042\065\044\064\001\001\000\016\022\220\023\200\025" +
    "\175\027\176\042\065\044\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\224\001\001\000\016\025" +
    "\241\027\176\033\071\042\065\043\242\044\064\001\001" +
    "\000\002\001\001\000\012\025\237\027\176\042\065\044" +
    "\064\001\001\000\016\025\235\027\176\033\071\042\065" +
    "\043\236\044\064\001\001\000\012\025\234\027\176\042" +
    "\065\044\064\001\001\000\012\025\233\027\176\042\065" +
    "\044\064\001\001\000\012\025\232\027\176\042\065\044" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\245\023\200\025\175\027" +
    "\176\042\065\044\064\001\001\000\002\001\001\000\004" +
    "\057\247\001\001\000\002\001\001\000\004\011\251\001" +
    "\001\000\026\002\046\012\044\014\034\016\037\017\040" +
    "\030\052\037\050\042\032\045\042\046\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\260\026\126\027" +
    "\122\030\123\033\071\042\065\043\125\044\064\001\001" +
    "\000\002\001\001\000\004\036\263\001\001\000\004\045" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\266\001\001\000\002\001\001\000\006\007\271\047" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\071\043\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\276\045\023\001\001\000\004\050\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\302\001\001\000\030\002\046\012\044\014\034\016\037" +
    "\017\040\030\052\034\304\037\050\042\032\045\042\046" +
    "\051\001\001\000\016\026\307\027\122\033\071\042\065" +
    "\043\306\044\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal."+x.toString());
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);
  
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


      private  int vtemporal=0;
      public  String nuevaTemporal()
      {
      	return "tmp"+(++vtemporal);
      }
      private  int etiqActual=0;
      public  String nuevaEtiqueta()
      {
      	return "etiqCP_"+(++etiqActual);
      }
      class BloqueCondicion {
	 String etqCierto, etqFalso,codigo;
	 }
	 private BloqueCondicion generarCondicion(String condicion)
	 {
	 BloqueCondicion bCond=new BloqueCondicion();
	 bCond.etqCierto=nuevaEtiqueta();
	 bCond.etqFalso=nuevaEtiqueta();
	 bCond.codigo="if_false,"+condicion+","+bCond.etqFalso+";\ngoto,"+bCond.etqCierto+";\n";
	 return bCond;
	 }
	 
      

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= listaDeclaraciones 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia l = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("C�digo generado:\n\nimport numpy as np\n" + l.codigo+"main()"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa error PTOYCOMA 
            {
              Object RESULT =null;
		 this.parser.error_sintactico(this.parser.cur_token);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaDeclaraciones ::= listaDeclaraciones DeclaracionVar 
            {
              Sentencia RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia l = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia d = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

					RESULT=new Sentencia(l.codigo+""+d.codigo,"");
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaDeclaraciones ::= listaDeclaraciones DeclaracionFuncion 
            {
              Sentencia RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia l = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia df = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					System.out.println("DECLARACION FUNCION:"+df.codigo);
					RESULT=new Sentencia(l.codigo+""+df.codigo,"");
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaDeclaraciones ::= 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaDeclaraciones ::= COMENTARIO 
            {
              Sentencia RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Sentencia("#"+ com.substring(2) + "\n", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclaracionVar ::= DeclaracionTipoBasico 
            {
              Sentencia RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia d1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				
					RESULT=new Sentencia(d1.codigo,d1.resultado);
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionVar ::= DeclaracionArr 
            {
              Sentencia RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia d1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT=new Sentencia(d1.codigo,d1.resultado);
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionTipoBasico ::= Tipo ID AsignacionDecl PTOYCOMA 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Sentencia resultSent=new Sentencia(s.nombre+"="+a.resultado+"\n",s.nombre);
									RESULT=resultSent;
									s.valor=a.resultado;
									s.tipo = t.resultado;							
									
									if(a.codigo != "None"){
										if(a.codigo == s.tipo){
											System.out.println("Va bien");
										}else{
											report_fatal_error("ERROR:la asignacion no se corresponde al tipo declarado",this.parser.cur_token);	
										}
									}
									Simbolo sAux;
									TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
									if ((sAux=tabla.buscarGlobal(s.nombre))==null){
										sAux=tabla.insertar(s);
										}else{
											report_fatal_error("Variable ya declarada",this.parser.cur_token);									
										}
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionTipoBasico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclaracionArr ::= Tipo ID ABRECOR NUM CIERRACOR DOSdim PTOYCOMA 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer tam = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia d2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Sentencia resultSent=new Sentencia(s.nombre+"=np.zeros(["+tam+d2.codigo+"])\n",s.nombre);
								RESULT=resultSent;
								s.tipo = t.resultado;
                s.tam = tam;
                s.tam2 = Integer.parseInt(d2.resultado);
                Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null){
									sAux=tabla.insertar(s);
								}else{
									report_fatal_error("Variable ya declarada",this.parser.cur_token);									
								}
								RESULT = resultSent;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionArr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DOSdim ::= 
            {
              Sentencia RESULT =null;
		Sentencia resultSent=new Sentencia("","0");
        	RESULT = resultSent;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOSdim",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DOSdim ::= ABRECOR NUM CIERRACOR 
            {
              Sentencia RESULT =null;
		int tamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer tam = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Sentencia resultSent=new Sentencia(","+tam,String.valueOf(tam));
           RESULT = resultSent;
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOSdim",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AsignacionDecl ::= ASIG Valores 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia v = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Sentencia(v.codigo,v.resultado); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsignacionDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AsignacionDecl ::= 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("None","None"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsignacionDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Valores ::= CARACTER 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					System.out.println("Entro en caracter");
					RESULT=new Sentencia("char",c); 
					System.out.println("Salgo en caracter");
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Valores ::= Bool_value 
            {
              Sentencia RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Sentencia("bool",b.resultado); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Numeros ::= NUM 
            {
              Sentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Sentencia s =new Sentencia("int",n.toString()); 
				s.tipo  = "int";
				RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Numeros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Numeros ::= NUMREAL 
            {
              Sentencia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Sentencia s =new Sentencia("real",n.toString()); 
					s.tipo  = "real";
					RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Numeros",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Bool_value ::= TRUE 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("bool","True"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_value",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Bool_value ::= FALSE 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("bool","False"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bool_value",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= INTEGER 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("","int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= REAL 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("","real"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= CHAR 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("","char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= BOOLEAN 
            {
              Sentencia RESULT =null;
		 RESULT=new Sentencia("","bool"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								s.tipo = t.resultado;
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									System.out.println("Insertando "+sAux.nombre);
									}
									this.parser.analizadorLexico.getTabla().set(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$1 ::= 
            {
              Sentencia RESULT =(Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia la = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
	s.tam = Integer.parseInt(la.resultado);
                                        s.param = la.tiposArgumentos;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DeclaracionFuncion ::= Tipo ID NT$0 ABREPAR listaargumentos NT$1 CIERRAPAR ABRELLAVE ListaSentencias ReturnSentencia CIERRALLAVE 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sentencia la = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia ls = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia rs = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
									this.parser.analizadorLexico.getTabla().reset();
									Sentencia resultSent=new Sentencia("def "+s.nombre+"("+la.codigo+"):\n"+ls.codigo+rs.codigo,s.nombre);
									System.out.println(rs.tipo +s.tipo);
									s.tam = Integer.parseInt(la.resultado);
									System.out.println("TAMAÑO FUNCION:"+la.resultado);
									
									if (rs.tipo == "both" && (s.tipo == "int" || s.tipo == "real")){
										System.out.println("Va bien");

										}else if(rs.tipo == "int" && s.tipo == "real"){
											System.out.println("Todo ok");
										}else{
											if(rs.tipo == s.tipo){
												System.out.println("Va bien");
											}else{
												report_fatal_error("EL return no cuadra",this.parser.cur_token);
											}
										}
									RESULT=resultSent;
			 						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
									Simbolo sAux;
									TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
									s.tipo = null;
									if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									System.out.println("Insertando "+sAux.nombre);
									}
									this.parser.analizadorLexico.getTabla().set(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Sentencia RESULT =(Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia la = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
	s.tam = Integer.parseInt(la.resultado);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Sentencia RESULT =(Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia la = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 
									Simbolo sAux;

									TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
									if ((sAux=tabla.buscarGlobal(s.nombre))==null)
										{
										sAux=tabla.insertar(s);
										System.out.println("Insertando "+sAux.nombre);
										}
									this.parser.analizadorLexico.getTabla().set(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DeclaracionFuncion ::= VOID ID NT$2 ABREPAR listaargumentos NT$3 CIERRAPAR ABRELLAVE NT$4 ListaSentencias CIERRALLAVE 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Sentencia la = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia ls = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
									this.parser.analizadorLexico.getTabla().reset();
									Sentencia resultSent=new Sentencia("def "+s.nombre+"("+la.codigo+"):\n"+ls.codigo,s.nombre);
									RESULT=resultSent;
			 
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ReturnSentencia ::= RETURN ExpresionNum PTOYCOMA 
            {
              Sentencia RESULT =null;
		int exprnumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprnumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia exprnum = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Sentencia s =new Sentencia("\treturn "+exprnum.codigo+"\n",""); 
									s.tipo = exprnum.tipo;
									RESULT = s;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnSentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ReturnSentencia ::= RETURN Valores PTOYCOMA 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia v = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Sentencia s =new Sentencia("return "+v.resultado+"\n","");
 								s.tipo = v.codigo;
 								RESULT= s;
 								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnSentencia",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaSentencias ::= ListaSentencias Sentence 
            {
              Sentencia RESULT =null;
		int ls1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ls1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia ls1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("Entro aqui: sentencia NO vacia:");
									RESULT=new Sentencia(ls1.codigo+"\t"+s.codigo,""); 
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaSentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListaSentencias ::= 
            {
              Sentencia RESULT =null;
		
									RESULT=new Sentencia("",""); 
									System.out.println("Entro aqui: sentencia vacia");
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaSentencias",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentence ::= DeclaracionArr 
            {
              Sentencia RESULT =null;
		int darrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int darrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia darr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Sentencia(darr.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentence ::= Asignacion PTOYCOMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new Sentencia(a.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sentence ::= LlamadaFunc PTOYCOMA 
            {
              Sentencia RESULT =null;
		int lFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia lFunc = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new Sentencia(lFunc.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Sentence ::= SenteicaIf 
            {
              Sentencia RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia sif = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Sentencia(sif.codigo,"");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentence ::= SentenciaWhile 
            {
              Sentencia RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia sw = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Sentencia(sw.codigo,"");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Sentence ::= Tipo ID PTOYCOMA 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
								System.out.println("entro en asignacion");
								Sentencia resultSent=new Sentencia(s.nombre+"=None\n",s.nombre);
								RESULT=resultSent;
								s.valor="None";
								s.tipo = t.resultado;
								
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									}else{
									report_fatal_error("Variable ya declarada",this.parser.cur_token);
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Sentence ::= COMENTARIO 
            {
              Sentencia RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Sentencia("#"+ com.substring(2) + "\n", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Sentence ::= Read 
            {
              Sentencia RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia rd = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Sentencia(rd.codigo+ "\n", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Sentence ::= Imprimir 
            {
              Sentencia RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia rd = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Sentencia(rd.codigo+ "\n", "");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentence",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Asignacion ::= Tipo ID ASIG AsigTipo 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia as = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
								System.out.println("entro en asignacion");
								Sentencia resultSent=new Sentencia(s.nombre+"="+as.resultado+"\n",s.nombre);
								RESULT=resultSent;
								s.valor=as.resultado;
								s.tipo = t.resultado;
								System.out.println(as.tipo+ s.tipo);
									if (as.tipo == "both" && (s.tipo == "int" || s.tipo == "real")){
											System.out.println("Va bien");

									}else if(as.tipo == "int" && s.tipo == "real"){
										System.out.println("Todo ok");
									}else{
										if(as.tipo == s.tipo){
											System.out.println("Va bien");
										}else{
											report_fatal_error("ERROR en asignacion",this.parser.cur_token);
										}
									}
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									sAux=tabla.insertar(s);
									}else{
									report_fatal_error("Variable ya declarada",this.parser.cur_token);
								}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Asignacion ::= ID ASIG AsigTipo 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia as = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									report_fatal_error("Variable no inicializada",this.parser.cur_token);	
								}else{
									s.tipo = sAux.tipo;
									System.out.println(as.tipo+ s.tipo);
									if (as.tipo == "both" && (s.tipo == "int" || s.tipo == "real")){
											System.out.println("Va bien");

									}else if(as.tipo == "int" && s.tipo == "real"){
										System.out.println("Todo ok");
									}else{
										if(as.tipo == s.tipo){
											System.out.println("Va bien");
										}else{
											report_fatal_error("ERROR en asignacion",this.parser.cur_token);
										}
									}
									Sentencia resultSent=new Sentencia(s.nombre+"="+as.resultado+"\n",s.nombre);
									RESULT=resultSent;
									s.valor=as.resultado;
									sAux.valor=as.resultado;									
								}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Asignacion ::= ArrElement ASIG AsigTipo 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia as = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if (as.tipo == "both" && (s.tipo == "int" || s.tipo == "real")){
									System.out.println("Va bien");
								}else if(as.tipo == "int" && s.tipo == "real"){
									System.out.println("Todo ok");
								}else{
									if(as.tipo == s.tipo){
										System.out.println("Va bien");
									}else{
										report_fatal_error("ERROR en asignacion",this.parser.cur_token);
									}
								}
								Sentencia sent = new Sentencia(s.codigo+"="+as.codigo+"\n","");
								RESULT = sent;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ArrElement ::= ID ABRECOR NUM CIERRACOR DOSdimAsig 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int posxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int posxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer posx = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia d2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Sentencia resultSent=new Sentencia(s.nombre+"["+posx+"]"+d2.codigo,s.nombre);
                Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null){
									report_fatal_error("Variable sin declarar",this.parser.cur_token);
								}else{
									if((sAux.tam <= posx) || (sAux.tam2 <= Integer.parseInt(d2.resultado))){
										report_fatal_error("Index fuera de limites del array",this.parser.cur_token);
									}									
								}
                resultSent.tipo = sAux.tipo;
                RESULT=resultSent;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrElement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DOSdimAsig ::= 
            {
              Sentencia RESULT =null;
		Sentencia resultSent=new Sentencia("","0");
        	RESULT = resultSent;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOSdimAsig",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DOSdimAsig ::= ABRECOR NUM CIERRACOR 
            {
              Sentencia RESULT =null;
		int tamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer tam = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Sentencia resultSent=new Sentencia("["+tam+"]",String.valueOf(tam));
           RESULT = resultSent;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOSdimAsig",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AsigTipo ::= ExpresionNum 
            {
              Sentencia RESULT =null;
		int exprnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia exprn = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Sentencia s = new Sentencia(exprn.codigo,exprn.codigo);
					s.tipo =  exprn.tipo;
					RESULT = s;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigTipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AsigTipo ::= LlamadaFunc 
            {
              Sentencia RESULT =null;
		int lFleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lFright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia lF = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Sentencia sent = new Sentencia(lF.codigo,lF.codigo);
					sent.tipo = lF.tipo;
					RESULT = sent;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigTipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AsigTipo ::= Valores 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia v = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				System.out.println("Entro en asig tipo valores");
				Sentencia s = new Sentencia(v.resultado,v.resultado);
				s.tipo = v.codigo;
				RESULT = s;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigTipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Elemento ::= Numeros 
            {
              Sentencia RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia num = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						Sentencia s =new Sentencia(num.resultado,num.resultado);
						s.tipo  = num.tipo;
						RESULT = s;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Elemento ::= ID 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Simbolo sAux;
						TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
						if ((sAux=tabla.buscarGlobal(s.nombre))==null){
						report_fatal_error("Variable no inicializada",this.parser.cur_token);
					}														
					Sentencia sent=new Sentencia(sAux.nombre,sAux.nombre);
					sent.tipo = sAux.tipo; 
					RESULT = sent;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Elemento ::= ArrElement 
            {
              Sentencia RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia arr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Sentencia sent = new Sentencia(arr.codigo,arr.codigo);
                sent.tipo = arr.tipo; 
				RESULT = sent;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elemento",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpresionNum ::= ExpresionNum MAS ExpresionNum 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                             if((e1.tipo == "char") || (e1.tipo=="bool") || (e2.tipo == "char") || (e2.tipo=="bool")){
                                 report_fatal_error("Operacion no soportada:un elemento de la expresion no es de tipo numerico",this.parser.cur_token);
                             }
							String temporal=nuevaTemporal();	
							Sentencia resultSent= new Sentencia(e1.codigo+"+"+e2.codigo,temporal);
							resultSent.tipo = "both";
							RESULT= resultSent; 
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpresionNum ::= ExpresionNum MENOS ExpresionNum 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                             if((e1.tipo == "char") || (e1.tipo=="bool") || (e2.tipo == "char") || (e2.tipo=="bool")){
                                 report_fatal_error("Operacion no soportada:un elemento de la expresion no es de tipo numerico",this.parser.cur_token);
                             }
                            String temporal=nuevaTemporal();	
							Sentencia resultSent= new Sentencia(e1.codigo+"-"+e2.codigo,temporal);
							resultSent.tipo = "both";
							RESULT= resultSent; 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpresionNum ::= ExpresionNum MULT ExpresionNum 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                             if((e1.tipo == "char") || (e1.tipo=="bool") || (e2.tipo == "char") || (e2.tipo=="bool")){
                                 report_fatal_error("Operacion no soportada:un elemento de la expresion no es de tipo numerico",this.parser.cur_token);
                             }
                            String temporal=nuevaTemporal();	
							Sentencia resultSent= new Sentencia(e1.codigo+"*"+e2.codigo,temporal);
							resultSent.tipo = "both";
							RESULT= resultSent; 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpresionNum ::= ExpresionNum DIV ExpresionNum 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                             if((e1.tipo == "char") || (e1.tipo=="bool") || (e2.tipo == "char") || (e2.tipo=="bool")){
                                 report_fatal_error("Operacion no soportada:un elemento de la expresion no es de tipo numerico",this.parser.cur_token);
                             }
                            String temporal=nuevaTemporal();	
							Sentencia resultSent= new Sentencia(e1.codigo+"/"+e2.codigo,temporal);

							resultSent.tipo = "both";
							
							RESULT= resultSent; 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpresionNum ::= ExpresionNum MOD ExpresionNum 
            {
              Sentencia RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia e1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e2 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							String temporal=nuevaTemporal();	
							Sentencia resultSent= new Sentencia(e1.codigo+"%"+e2.codigo,temporal);
							if(e1.tipo != "int" || e2.tipo != "int"){
								report_fatal_error("Operacion no soportada",this.parser.cur_token);
							}
							resultSent.tipo = "int";
							RESULT= resultSent; 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpresionNum ::= Elemento 
            {
              Sentencia RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia el = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Sentencia s =new Sentencia(el.resultado,el.resultado);
							s.tipo = el.tipo;
							RESULT = s;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpresionNum ::= MENOS ExpresionNum 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
							if((e.tipo == "char") || (e.tipo=="bool")){
                                 report_fatal_error("Operacion no soportada:un elemento de la expresion no es de tipo numerico",this.parser.cur_token);
                             }
                            String temporal=nuevaTemporal();	
							Sentencia resultSent= new Sentencia("-"+e.codigo,temporal);
							resultSent.tipo = "both";
							
							RESULT= resultSent; 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpresionNum ::= ABREPAR ExpresionNum CIERRAPAR 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							if((e.tipo == "char") || (e.tipo=="bool")){
                                 report_fatal_error("Operacion no soportada:un elemento de la expresion no es de tipo numerico",this.parser.cur_token);
                             }
                            String temporal=nuevaTemporal();	
							Sentencia resultSent= new Sentencia("("+e.codigo+")",temporal);
							resultSent.tipo = "both";
							
							RESULT= resultSent; 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionNum",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LlamadaFunc ::= ID ABREPAR ListaParam CIERRAPAR 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia l = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							Simbolo sAux;
							TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null){
								report_fatal_error("Variable no inicializada",this.parser.cur_token);
							}
							System.out.println("PARAMETROS"+Integer.parseInt(l.resultado));
							if(sAux.tam != Integer.parseInt(l.resultado)){
								report_fatal_error("Numero de parametros incorrecto",this.parser.cur_token);
							}
							System.out.println(sAux.param);
							System.out.println(l.tiposArgumentos);
							
							System.out.println("Analizo la llamada a la funcion");
                            for(int i=0;i<sAux.param.size();i++){
                                System.out.println("Funcion "+sAux.param.get(i)+" llamada "+l.tiposArgumentos.get(i) );
                                if(sAux.param.get(i)!= l.tiposArgumentos.get(i)){
                                    report_fatal_error("Parametros erroneos",this.parser.cur_token);
                                }
                            }
							Sentencia resultSent= new Sentencia(s.nombre+"("+l.codigo+")\n", l.resultado);
							resultSent.tipo = sAux.tipo;
							RESULT= resultSent; 
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadaFunc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListaParam ::= Elemento ListaParam_p 
            {
              Sentencia RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia elem = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia lp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Sentencia resultSent= new Sentencia(elem.resultado+lp.codigo,String.valueOf(1+Integer.parseInt(lp.resultado)));
						resultSent.tiposArgumentos.addAll(lp.tiposArgumentos);
						
                        resultSent.tiposArgumentos.add(elem.tipo);
						RESULT= resultSent; 
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListaParam ::= Valores ListaParam_p 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia v = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia lp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			Sentencia resultSent = new Sentencia(v.resultado+lp.codigo,String.valueOf(1+Integer.parseInt(lp.resultado)));
						resultSent.tiposArgumentos.addAll(lp.tiposArgumentos);
						
						System.out.println("Valores en algumento"+v.codigo);
                        resultSent.tiposArgumentos.add(v.codigo);
						RESULT= resultSent; 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListaParam ::= 
            {
              Sentencia RESULT =null;
		
						RESULT = new Sentencia("","0");
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListaParam_p ::= 
            {
              Sentencia RESULT =null;
		
						RESULT = new Sentencia("","0");
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam_p",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListaParam_p ::= COMA Elemento ListaParam_p 
            {
              Sentencia RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia elem = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia lp1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Sentencia resultSent = new Sentencia(","+elem.resultado+lp1.codigo,String.valueOf(1+Integer.parseInt(lp1.resultado)));
                        resultSent.tiposArgumentos.addAll(lp1.tiposArgumentos);
                        
                        resultSent.tiposArgumentos.add(elem.tipo);
						RESULT= resultSent; 
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam_p",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListaParam_p ::= COMA Valores ListaParam_p 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia v = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia lp1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			Sentencia resultSent = new Sentencia(","+v.resultado+lp1.codigo,String.valueOf(1+Integer.parseInt(lp1.resultado)));
						System.out.println("Add tipo valor"+v.codigo);
                        resultSent.tiposArgumentos.addAll(lp1.tiposArgumentos);
                        
                        resultSent.tiposArgumentos.add(v.codigo);
						RESULT= resultSent; 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaParam_p",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListaExprLogicas ::= ExprLogica AND ListaExprLogicas 
            {
              Sentencia RESULT =null;
		int ex_logica1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex_logica1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia ex_logica1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia l_exp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new Sentencia(ex_logica1.codigo +" and "+l_exp.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExprLogicas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListaExprLogicas ::= ExprLogica OR ListaExprLogicas 
            {
              Sentencia RESULT =null;
		int ex_logica1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex_logica1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia ex_logica1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia l_exp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new Sentencia(ex_logica1.codigo +" or "+l_exp.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExprLogicas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListaExprLogicas ::= ExprLogica 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
									System.out.println("Analizo expresion logica");
									RESULT= new Sentencia(e.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ListaExprLogicas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExprLogica ::= Expr TipoExpr 
            {
              Sentencia RESULT =null;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia exprl = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipo_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia tipo_expr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia(exprl.codigo+tipo_expr.codigo ,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprLogica",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExprLogica ::= ABREPAR Expr TipoExpr CIERRAPAR 
            {
              Sentencia RESULT =null;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia exprl = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipo_exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipo_exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia tipo_expr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprLogica",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TipoExpr ::= EQUAL Expr 
            {
              Sentencia RESULT =null;
		int exprl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia exprl1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia("=="+exprl1.codigo,"");
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TipoExpr ::= NOT_EQUAL Expr 
            {
              Sentencia RESULT =null;
		int exprl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia exprl1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia("!="+exprl1.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TipoExpr ::= BIGGER Expr 
            {
              Sentencia RESULT =null;
		int exprl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia exprl1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia(">"+exprl1.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TipoExpr ::= BIGGER_EQUAL Expr 
            {
              Sentencia RESULT =null;
		int exprl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia exprl1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia(">="+exprl1.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TipoExpr ::= SMALLER Expr 
            {
              Sentencia RESULT =null;
		int exprl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia exprl1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia("<"+exprl1.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TipoExpr ::= SMALLER_EQUAL Expr 
            {
              Sentencia RESULT =null;
		int exprl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia exprl1 = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia("<="+exprl1.codigo,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TipoExpr ::= NOT_EQUAL Valores 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia v = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia("!="+v.resultado,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TipoExpr ::= EQUAL Valores 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia v = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = new Sentencia("=="+v.resultado,""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoExpr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Elemento 
            {
              Sentencia RESULT =null;
		int elemtoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elemtoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia elemto = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Sentencia(elemto.resultado,"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$5 ::= 
            {
              Sentencia RESULT =null;
		int l_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int l_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia l_exp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
this.parser.analizadorLexico.getTabla().set();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Sentencia RESULT =(Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int l_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Sentencia l_exp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia ls = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
this.parser.analizadorLexico.getTabla().reset();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SenteicaIf ::= IF ABREPAR ListaExprLogicas CIERRAPAR ABRELLAVE NT$5 ListaSentencias NT$6 CIERRALLAVE SentenciaElse 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int l_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Sentencia l_exp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Sentencia ls = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia se = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							ls.codigo = ls.codigo.replace("\n", "\n\t");
							String codigo =  "if("+l_exp.codigo+"):\n\t"+ls.codigo+se.codigo;
							RESULT = new Sentencia(codigo+"\n","");
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SenteicaIf",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SentenciaElse ::= 
            {
              Sentencia RESULT =null;
			System.out.println("Entro en sentencia else");
							RESULT = new Sentencia("","");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentenciaElse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$7 ::= 
            {
              Sentencia RESULT =null;
this.parser.analizadorLexico.getTabla().set();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SentenciaElse ::= ELSE ABRELLAVE NT$7 ListaSentencias CIERRALLAVE 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia ls = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
							this.parser.analizadorLexico.getTabla().reset();
							ls.codigo = ls.codigo.replace("\n", "\n\t");
							String codigo =  "else:\n\t"+ls.codigo;
							RESULT = new Sentencia(codigo+"\n","");
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentenciaElse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$8 ::= 
            {
              Sentencia RESULT =null;
		int l_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia l_exp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
this.parser.analizadorLexico.getTabla().set();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SentenciaWhile ::= WHILE ABREPAR ListaExprLogicas CIERRAPAR NT$8 ABRELLAVE ListaSentencias CIERRALLAVE 
            {
              Sentencia RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Sentencia) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int l_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Sentencia l_exp = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia ls = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			this.parser.analizadorLexico.getTabla().reset();
									ls.codigo = ls.codigo.replace("\n", "\n\t");
									String codigo =  "while("+l_exp.codigo+"):\n\t"+ls.codigo;
									RESULT = new Sentencia(codigo+"\n","");
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SentenciaWhile",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listaargumentos ::= 
            {
              Sentencia RESULT =null;
		 RESULT = new Sentencia("", "0"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // listaargumentos ::= Tipo ID listaargumentos_p 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo id = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								Simbolo sAux;
								id.tipo = t.resultado;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(id.nombre))==null)
								{
									sAux=tabla.insertar(id);
								}
			 					Sentencia sent= new Sentencia(id.nombre+a.codigo,String.valueOf(1+Integer.parseInt(a.resultado)));
			 					 System.out.println("inserto "+id.tipo);
			 					
                                 sent.tiposArgumentos.addAll(a.tiposArgumentos);
                                 sent.tiposArgumentos.add(id.tipo);
                                 
                                RESULT = sent;
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listaargumentos_p ::= 
            {
              Sentencia RESULT =null;
		 
									RESULT = new Sentencia("", "0");
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos_p",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // listaargumentos_p ::= COMA Tipo ID listaargumentos_p 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia t = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo id = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia l = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
									Simbolo sAux;
									id.tipo = t.resultado;
											TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
											if ((sAux=tabla.buscarGlobal(id.nombre))==null)
											{
												sAux=tabla.insertar(id);
											}
									Sentencia sent = new Sentencia(","+id.nombre+l.codigo, String.valueOf(1+Integer.parseInt(l.resultado)));
                                    sent.tiposArgumentos.addAll(l.tiposArgumentos);
                                    
                                    sent.tiposArgumentos.add(id.tipo);
                                    System.out.println("inserto "+id.tipo);
                                    RESULT = sent;
									/* Se busca en tabla de simbolos y se inserta o devuelve error*/
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaargumentos_p",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Read ::= READ ABREPAR ID CIERRAPAR PTOYCOMA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo s = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
								Simbolo sAux;
								TablaSimbolos tabla=this.parser.analizadorLexico.getTabla();
								if ((sAux=tabla.buscarGlobal(s.nombre))==null)
									{
									report_fatal_error("Variable sin declarar",this.parser.cur_token);
									}
									
									RESULT = new Sentencia (s.nombre + "= input()","");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Read",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Imprimir ::= PRINT ABREPAR expPrint CIERRAPAR PTOYCOMA 
            {
              Sentencia RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Sentencia expr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Sentencia ("print("+expr.codigo+")","");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Imprimir",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expPrint ::= 
            {
              Sentencia RESULT =null;
		 RESULT = new Sentencia("", ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expPrint ::= TEXTO expPrint_P 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sentencia(t+i.codigo, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expPrint ::= Valores expPrint_P 
            {
              Sentencia RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia valores = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sentencia(valores.resultado+i.codigo, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expPrint ::= Elemento expPrint_P 
            {
              Sentencia RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia expr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sentencia(expr.codigo+i.codigo, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expPrint_P ::= 
            {
              Sentencia RESULT =null;
		 
					RESULT = new Sentencia("", ""); 
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint_P",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expPrint_P ::= MAS Valores expPrint_P 
            {
              Sentencia RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia valores = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Sentencia(","+valores.resultado+e.codigo, "");
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint_P",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expPrint_P ::= MAS Elemento expPrint 
            {
              Sentencia RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Sentencia expr = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sentencia(","+expr.codigo+e.codigo, "");
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint_P",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expPrint_P ::= MAS TEXTO expPrint_P 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Sentencia(","+t+i.codigo, ""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expPrint_P",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
